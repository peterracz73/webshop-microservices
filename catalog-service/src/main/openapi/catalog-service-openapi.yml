openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: 'http://localhost:8080'
    description: Generated server url
paths:
  /api/catalog/categories:
    post:
      summary: Post new catalog
      operationId: createNewCatalog
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDto'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDto'
          application/xml:
            schema:
              $ref: '#/components/schemas/CategoryDto'
      parameters: []
      tags:
        - CategoryController
    parameters: []
    get:
      summary: ''
      operationId: getAllCategories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryDto'
      tags:
        - CategoryController
  /api/catalog/products:
    get:
      summary: getAllPoducts
      tags:
        - ProductController
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductDto'
      operationId: getAllPoducts
    post:
      summary: postNewProduct
      operationId: postNewProduct
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
      tags:
        - ProductController
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDto'
        description: ''
    put:
      summary: modifyProduct
      operationId: modifyProduct
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
      tags:
        - ProductController
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDto'
        description: ''
    delete:
      summary: deleteProduct
      operationId: deleteProduct
      responses:
        '200':
          description: OK
      tags:
        - ProductController
      parameters:
        - schema:
            type: integer
            format: int64
          in: query
          name: id
    parameters: []
  /api/catalog/search:
    get:
      summary: searchProducts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductDto'
      operationId: searchProducts
      parameters:
        - schema:
            type: array
            items:
              type: number
              format: double
          in: query
          name: price
        - schema:
            type: string
          in: query
          name: name
        - schema:
            type: string
          in: query
          name: category.name
        - schema:
            type: integer
            format: int32
          in: query
          name: page
        - schema:
            type: integer
            format: int32
          in: query
          name: size
        - schema:
            type: string
          in: query
          name: sort
      tags:
        - SearchController
    parameters: []
  /api/catalog/history:
    get:
      summary: getProductHistory
      tags:
        - HistoryController
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductHistoryDto'
      operationId: getProductHistory
      parameters:
        - schema:
            type: integer
            format: int64
          in: query
          name: productId
components:
  schemas:
    CategoryDto:
      title: CategoryDto
      type: object
      x-tags:
        - CatalogDtos
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
    ProductDto:
      title: ProductDto
      type: object
      description: ''
      x-tags:
        - ProductDto
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        price:
          type: number
          format: double
        category:
          type: object
          properties:
            id:
              type: integer
              format: int32
            name:
              type: string
    ProductHistoryDto:
      title: ProductHistoryDto
      type: object
      x-tags:
        - ProductHistoryDto
      properties:
        name:
          type: string
        price:
          type: number
          format: double
        date:
          type: string
          format: date-time
